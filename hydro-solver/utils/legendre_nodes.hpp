#ifndef HYDRO_SOLVER_UTILS_LEGENDRE_NODES_HPP_
#define HYDRO_SOLVER_UTILS_LEGENDRE_NODES_HPP_

#include <array>
#include <cstddef>
#include <vector>

constexpr std::size_t legendreOrderMax = 15;

constexpr std::array<double,
                     (legendreOrderMax + 1) * (legendreOrderMax + 2) / 2>
    legendreNodes{
        0.5,                               // 0
        0.5 * (1.0 - 0.5773502691896257),  // 1
        0.5 * (1.0 + 0.5773502691896257),
        0.5 * (1.0 - 0.7745966692414834),  // 2
        0.5,
        0.5 * (1.0 + 0.7745966692414834),
        0.5 * (1.0 - 0.8611363115940526),  // 3
        0.5 * (1.0 - 0.3399810435848563),
        0.5 * (1.0 + 0.3399810435848563),
        0.5 * (1.0 + 0.8611363115940526),
        0.5 * (1.0 - 0.9061798459386640),  // 4
        0.5 * (1.0 - 0.5384693101056831),
        0.5,
        0.5 * (1.0 + 0.5384693101056831),
        0.5 * (1.0 + 0.9061798459386640),
        0.5 * (1.0 - 0.9324695142031521),  // 5
        0.5 * (1.0 - 0.6612093864662645),
        0.5 * (1.0 - 0.2386191860831969),
        0.5 * (1.0 + 0.2386191860831969),
        0.5 * (1.0 + 0.6612093864662645),
        0.5 * (1.0 + 0.9324695142031521),
        0.5 * (1.0 - 0.9491079123427585),  // 6
        0.5 * (1.0 - 0.7415311855993945),
        0.5 * (1.0 - 0.4058451513773972),
        0.5,
        0.5 * (1.0 + 0.4058451513773972),
        0.5 * (1.0 + 0.7415311855993945),
        0.5 * (1.0 + 0.9491079123427585),
        0.5 * (1.0 - 0.9602898564975363),  // 7
        0.5 * (1.0 - 0.7966664774136267),
        0.5 * (1.0 - 0.5255324099163290),
        0.5 * (1.0 - 0.1834346424956498),
        0.5 * (1.0 + 0.1834346424956498),
        0.5 * (1.0 + 0.5255324099163290),
        0.5 * (1.0 + 0.7966664774136267),
        0.5 * (1.0 + 0.9602898564975363),
        0.5 * (1.0 - 0.9681602395076261),  // 8
        0.5 * (1.0 - 0.8360311073266358),
        0.5 * (1.0 - 0.6133714327005904),
        0.5 * (1.0 - 0.3242534234038089),
        0.5,
        0.5 * (1.0 + 0.3242534234038089),
        0.5 * (1.0 + 0.6133714327005904),
        0.5 * (1.0 + 0.8360311073266358),
        0.5 * (1.0 + 0.9681602395076261),
        0.5 * (1.0 - 0.9739065285171717),  // 9
        0.5 * (1.0 - 0.8650633666889845),
        0.5 * (1.0 - 0.6794095682990244),
        0.5 * (1.0 - 0.4333953941292472),
        0.5 * (1.0 - 0.1488743389816312),
        0.5 * (1.0 + 0.1488743389816312),
        0.5 * (1.0 + 0.4333953941292472),
        0.5 * (1.0 + 0.6794095682990244),
        0.5 * (1.0 + 0.8650633666889845),
        0.5 * (1.0 + 0.9739065285171717),
        0.5 * (1.0 - 0.9782286581460570),  // 10
        0.5 * (1.0 - 0.8870625997680953),
        0.5 * (1.0 - 0.7301520055740494),
        0.5 * (1.0 - 0.5190961292068118),
        0.5 * (1.0 - 0.2695431559523450),
        0.5,
        0.5 * (1.0 + 0.2695431559523450),
        0.5 * (1.0 + 0.5190961292068118),
        0.5 * (1.0 + 0.7301520055740494),
        0.5 * (1.0 + 0.8870625997680953),
        0.5 * (1.0 + 0.9782286581460570),
        0.5 * (1.0 - 0.9815606342467192),  // 11
        0.5 * (1.0 - 0.9041172563704749),
        0.5 * (1.0 - 0.7699026741943047),
        0.5 * (1.0 - 0.5873179542866175),
        0.5 * (1.0 - 0.3678314989981802),
        0.5 * (1.0 - 0.1252334085114689),
        0.5 * (1.0 + 0.1252334085114689),
        0.5 * (1.0 + 0.3678314989981802),
        0.5 * (1.0 + 0.5873179542866175),
        0.5 * (1.0 + 0.7699026741943047),
        0.5 * (1.0 + 0.9041172563704749),
        0.5 * (1.0 + 0.9815606342467192),
        0.5 * (1.0 - 0.9841830547185881),  // 12
        0.5 * (1.0 - 0.9175983992229779),
        0.5 * (1.0 - 0.8015780907333099),
        0.5 * (1.0 - 0.6423493394403402),
        0.5 * (1.0 - 0.4484927510364469),
        0.5 * (1.0 - 0.2304583159551348),
        0.5,
        0.5 * (1.0 + 0.2304583159551348),
        0.5 * (1.0 + 0.4484927510364469),
        0.5 * (1.0 + 0.6423493394403402),
        0.5 * (1.0 + 0.8015780907333099),
        0.5 * (1.0 + 0.9175983992229779),
        0.5 * (1.0 + 0.9841830547185881),
        0.5 * (1.0 - 0.9862838086968123),  // 13
        0.5 * (1.0 - 0.9284348836635735),
        0.5 * (1.0 - 0.8272013150697650),
        0.5 * (1.0 - 0.6872929048116855),
        0.5 * (1.0 - 0.5152486363581541),
        0.5 * (1.0 - 0.3191123689278897),
        0.5 * (1.0 - 0.1080549487073437),
        0.5 * (1.0 + 0.1080549487073437),
        0.5 * (1.0 + 0.3191123689278897),
        0.5 * (1.0 + 0.5152486363581541),
        0.5 * (1.0 + 0.6872929048116855),
        0.5 * (1.0 + 0.8272013150697650),
        0.5 * (1.0 + 0.9284348836635735),
        0.5 * (1.0 + 0.9862838086968123),
        0.5 * (1.0 - 0.9879925180204854),  // 14
        0.5 * (1.0 - 0.9372733924007060),
        0.5 * (1.0 - 0.8482065834104272),
        0.5 * (1.0 - 0.7244177313601701),
        0.5 * (1.0 - 0.5709721726085388),
        0.5 * (1.0 - 0.3941513470775634),
        0.5 * (1.0 - 0.2011940939974345),
        0.5,
        0.5 * (1.0 + 0.2011940939974345),
        0.5 * (1.0 + 0.3941513470775634),
        0.5 * (1.0 + 0.5709721726085388),
        0.5 * (1.0 + 0.7244177313601701),
        0.5 * (1.0 + 0.8482065834104272),
        0.5 * (1.0 + 0.9372733924007060),
        0.5 * (1.0 + 0.9879925180204854),
        0.5 * (1.0 - 0.9894009349916499),  // 15
        0.5 * (1.0 - 0.9445750230732326),
        0.5 * (1.0 - 0.8656312023878318),
        0.5 * (1.0 - 0.7554044083550030),
        0.5 * (1.0 - 0.6178762444026438),
        0.5 * (1.0 - 0.4580167776572274),
        0.5 * (1.0 - 0.2816035507792589),
        0.5 * (1.0 - 0.0950125098376374),
        0.5 * (1.0 + 0.0950125098376374),
        0.5 * (1.0 + 0.2816035507792589),
        0.5 * (1.0 + 0.4580167776572274),
        0.5 * (1.0 + 0.6178762444026438),
        0.5 * (1.0 + 0.7554044083550030),
        0.5 * (1.0 + 0.8656312023878318),
        0.5 * (1.0 + 0.9445750230732326),
        0.5 * (1.0 + 0.9894009349916499),
    };

inline constexpr std::size_t getLegendreStartIndex(const std::size_t order) {
  return order * (order + 1) / 2;
}

std::vector<double> getLegendreNodes(const std::size_t order);

#endif  // HYDRO_SOLVER_UTILS_LEGENDRE_NODES_HPP_
