#ifndef HYDRO_SOLVER_UTILS_LOBATTO_NODES_HPP_
#define HYDRO_SOLVER_UTILS_LOBATTO_NODES_HPP_

#include <array>
#include <cassert>
#include <cstddef>
#include <vector>

constexpr std::size_t lobattoOrderMax = 8;

constexpr std::array<double, (lobattoOrderMax + 1) * (lobattoOrderMax + 2) / 2>
    lobattoNodes{
        0.5,  // 0
        0.0,  // 1
        1.0,
        0.0,  // 2
        0.5,
        1.0,
        0.0,  // 3
        0.5 * (1.0 - 0.44721359549995793928),
        0.5 * (1.0 + 0.44921359549995793928),
        1.0,
        0.0,  // 4
        0.5 * (1.0 - 0.65465367070797714380),
        0.5,
        0.5 * (1.0 + 0.65465367070797714380),
        1.0,
        0.0,  // 5
        0.5 * (1.0 - 0.76505532392946469285),
        0.5 * (1.0 - 0.28523151648064509631),
        0.5 * (1.0 + 0.28523151648064509631),
        0.5 * (1.0 + 0.76505532392946469285),
        1.0,
        0.0,  // 6
        0.5 * (1.0 - 0.83022389627856692987),
        0.5 * (1.0 - 0.46884879347071421380),
        0.5,
        0.5 * (1.0 + 0.46884879347071421380),
        0.5 * (1.0 + 0.83022389627856692987),
        1.0,
        0.0,  // 7
        0.5 * (1.0 - 0.87174014850960661534),
        0.5 * (1.0 - 0.59170018143314230214),
        0.5 * (1.0 - 0.20929921790247886877),
        0.5 * (1.0 + 0.20929921790247886877),
        0.5 * (1.0 + 0.59170018143314230214),
        0.5 * (1.0 + 0.87174014850960661534),
        1.0,
        0.0,  // 8
        0.5 * (1.0 - 0.89975799541146015731),
        0.5 * (1.0 - 0.67718627951073775345),
        0.5 * (1.0 - 0.36311746382617815871),
        0.5,
        0.5 * (1.0 + 0.36311746382617815871),
        0.5 * (1.0 + 0.67718627951073775345),
        0.5 * (1.0 + 0.89975799541146015731),
        1.0,
    };

inline constexpr std::size_t getLobattoStartIndex(const std::size_t order) {
  assert(order <= lobattoOrderMax);
  return order * (order + 1) / 2;
}

std::vector<double> getLobattoNodes(const std::size_t order);

#endif  // HYDRO_SOLVER_UTILS_LOBATTO_NODES_HPP_
